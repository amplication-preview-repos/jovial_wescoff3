/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore6 } from "./Operatore6";
import { Operatore6CountArgs } from "./Operatore6CountArgs";
import { Operatore6FindManyArgs } from "./Operatore6FindManyArgs";
import { Operatore6FindUniqueArgs } from "./Operatore6FindUniqueArgs";
import { CreateOperatore6Args } from "./CreateOperatore6Args";
import { UpdateOperatore6Args } from "./UpdateOperatore6Args";
import { DeleteOperatore6Args } from "./DeleteOperatore6Args";
import { Operatore6Service } from "../operatore6.service";
@graphql.Resolver(() => Operatore6)
export class Operatore6ResolverBase {
  constructor(protected readonly service: Operatore6Service) {}

  async _operatore6sMeta(
    @graphql.Args() args: Operatore6CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore6])
  async operatore6s(
    @graphql.Args() args: Operatore6FindManyArgs
  ): Promise<Operatore6[]> {
    return this.service.operatore6s(args);
  }

  @graphql.Query(() => Operatore6, { nullable: true })
  async operatore6(
    @graphql.Args() args: Operatore6FindUniqueArgs
  ): Promise<Operatore6 | null> {
    const result = await this.service.operatore6(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore6)
  async createOperatore6(
    @graphql.Args() args: CreateOperatore6Args
  ): Promise<Operatore6> {
    return await this.service.createOperatore6({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore6)
  async updateOperatore6(
    @graphql.Args() args: UpdateOperatore6Args
  ): Promise<Operatore6 | null> {
    try {
      return await this.service.updateOperatore6({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore6)
  async deleteOperatore6(
    @graphql.Args() args: DeleteOperatore6Args
  ): Promise<Operatore6 | null> {
    try {
      return await this.service.deleteOperatore6(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
