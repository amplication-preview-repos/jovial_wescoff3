/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore12 as PrismaOperatore12 } from "@prisma/client";

export class Operatore12ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore12CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore12.count(args);
  }

  async operatore12s(
    args: Prisma.Operatore12FindManyArgs
  ): Promise<PrismaOperatore12[]> {
    return this.prisma.operatore12.findMany(args);
  }
  async operatore12(
    args: Prisma.Operatore12FindUniqueArgs
  ): Promise<PrismaOperatore12 | null> {
    return this.prisma.operatore12.findUnique(args);
  }
  async createOperatore12(
    args: Prisma.Operatore12CreateArgs
  ): Promise<PrismaOperatore12> {
    return this.prisma.operatore12.create(args);
  }
  async updateOperatore12(
    args: Prisma.Operatore12UpdateArgs
  ): Promise<PrismaOperatore12> {
    return this.prisma.operatore12.update(args);
  }
  async deleteOperatore12(
    args: Prisma.Operatore12DeleteArgs
  ): Promise<PrismaOperatore12> {
    return this.prisma.operatore12.delete(args);
  }
}
