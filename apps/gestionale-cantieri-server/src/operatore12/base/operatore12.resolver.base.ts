/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore12 } from "./Operatore12";
import { Operatore12CountArgs } from "./Operatore12CountArgs";
import { Operatore12FindManyArgs } from "./Operatore12FindManyArgs";
import { Operatore12FindUniqueArgs } from "./Operatore12FindUniqueArgs";
import { CreateOperatore12Args } from "./CreateOperatore12Args";
import { UpdateOperatore12Args } from "./UpdateOperatore12Args";
import { DeleteOperatore12Args } from "./DeleteOperatore12Args";
import { Operatore12Service } from "../operatore12.service";
@graphql.Resolver(() => Operatore12)
export class Operatore12ResolverBase {
  constructor(protected readonly service: Operatore12Service) {}

  async _operatore12sMeta(
    @graphql.Args() args: Operatore12CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore12])
  async operatore12s(
    @graphql.Args() args: Operatore12FindManyArgs
  ): Promise<Operatore12[]> {
    return this.service.operatore12s(args);
  }

  @graphql.Query(() => Operatore12, { nullable: true })
  async operatore12(
    @graphql.Args() args: Operatore12FindUniqueArgs
  ): Promise<Operatore12 | null> {
    const result = await this.service.operatore12(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore12)
  async createOperatore12(
    @graphql.Args() args: CreateOperatore12Args
  ): Promise<Operatore12> {
    return await this.service.createOperatore12({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore12)
  async updateOperatore12(
    @graphql.Args() args: UpdateOperatore12Args
  ): Promise<Operatore12 | null> {
    try {
      return await this.service.updateOperatore12({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore12)
  async deleteOperatore12(
    @graphql.Args() args: DeleteOperatore12Args
  ): Promise<Operatore12 | null> {
    try {
      return await this.service.deleteOperatore12(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
