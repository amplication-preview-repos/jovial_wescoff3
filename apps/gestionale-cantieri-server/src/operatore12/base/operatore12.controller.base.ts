/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Operatore12Service } from "../operatore12.service";
import { Operatore12CreateInput } from "./Operatore12CreateInput";
import { Operatore12 } from "./Operatore12";
import { Operatore12FindManyArgs } from "./Operatore12FindManyArgs";
import { Operatore12WhereUniqueInput } from "./Operatore12WhereUniqueInput";
import { Operatore12UpdateInput } from "./Operatore12UpdateInput";

export class Operatore12ControllerBase {
  constructor(protected readonly service: Operatore12Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore12 })
  async createOperatore12(
    @common.Body() data: Operatore12CreateInput
  ): Promise<Operatore12> {
    return await this.service.createOperatore12({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore12] })
  @ApiNestedQuery(Operatore12FindManyArgs)
  async operatore12s(@common.Req() request: Request): Promise<Operatore12[]> {
    const args = plainToClass(Operatore12FindManyArgs, request.query);
    return this.service.operatore12s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore12 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore12(
    @common.Param() params: Operatore12WhereUniqueInput
  ): Promise<Operatore12 | null> {
    const result = await this.service.operatore12({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore12 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore12(
    @common.Param() params: Operatore12WhereUniqueInput,
    @common.Body() data: Operatore12UpdateInput
  ): Promise<Operatore12 | null> {
    try {
      return await this.service.updateOperatore12({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore12 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore12(
    @common.Param() params: Operatore12WhereUniqueInput
  ): Promise<Operatore12 | null> {
    try {
      return await this.service.deleteOperatore12({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
