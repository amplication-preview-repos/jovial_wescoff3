/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore8 as PrismaOperatore8 } from "@prisma/client";

export class Operatore8ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore8CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore8.count(args);
  }

  async operatore8s(
    args: Prisma.Operatore8FindManyArgs
  ): Promise<PrismaOperatore8[]> {
    return this.prisma.operatore8.findMany(args);
  }
  async operatore8(
    args: Prisma.Operatore8FindUniqueArgs
  ): Promise<PrismaOperatore8 | null> {
    return this.prisma.operatore8.findUnique(args);
  }
  async createOperatore8(
    args: Prisma.Operatore8CreateArgs
  ): Promise<PrismaOperatore8> {
    return this.prisma.operatore8.create(args);
  }
  async updateOperatore8(
    args: Prisma.Operatore8UpdateArgs
  ): Promise<PrismaOperatore8> {
    return this.prisma.operatore8.update(args);
  }
  async deleteOperatore8(
    args: Prisma.Operatore8DeleteArgs
  ): Promise<PrismaOperatore8> {
    return this.prisma.operatore8.delete(args);
  }
}
