/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore11 as PrismaOperatore11 } from "@prisma/client";

export class Operatore11ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore11CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore11.count(args);
  }

  async operatore11s(
    args: Prisma.Operatore11FindManyArgs
  ): Promise<PrismaOperatore11[]> {
    return this.prisma.operatore11.findMany(args);
  }
  async operatore11(
    args: Prisma.Operatore11FindUniqueArgs
  ): Promise<PrismaOperatore11 | null> {
    return this.prisma.operatore11.findUnique(args);
  }
  async createOperatore11(
    args: Prisma.Operatore11CreateArgs
  ): Promise<PrismaOperatore11> {
    return this.prisma.operatore11.create(args);
  }
  async updateOperatore11(
    args: Prisma.Operatore11UpdateArgs
  ): Promise<PrismaOperatore11> {
    return this.prisma.operatore11.update(args);
  }
  async deleteOperatore11(
    args: Prisma.Operatore11DeleteArgs
  ): Promise<PrismaOperatore11> {
    return this.prisma.operatore11.delete(args);
  }
}
