/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore11 } from "./Operatore11";
import { Operatore11CountArgs } from "./Operatore11CountArgs";
import { Operatore11FindManyArgs } from "./Operatore11FindManyArgs";
import { Operatore11FindUniqueArgs } from "./Operatore11FindUniqueArgs";
import { CreateOperatore11Args } from "./CreateOperatore11Args";
import { UpdateOperatore11Args } from "./UpdateOperatore11Args";
import { DeleteOperatore11Args } from "./DeleteOperatore11Args";
import { Operatore11Service } from "../operatore11.service";
@graphql.Resolver(() => Operatore11)
export class Operatore11ResolverBase {
  constructor(protected readonly service: Operatore11Service) {}

  async _operatore11sMeta(
    @graphql.Args() args: Operatore11CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore11])
  async operatore11s(
    @graphql.Args() args: Operatore11FindManyArgs
  ): Promise<Operatore11[]> {
    return this.service.operatore11s(args);
  }

  @graphql.Query(() => Operatore11, { nullable: true })
  async operatore11(
    @graphql.Args() args: Operatore11FindUniqueArgs
  ): Promise<Operatore11 | null> {
    const result = await this.service.operatore11(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore11)
  async createOperatore11(
    @graphql.Args() args: CreateOperatore11Args
  ): Promise<Operatore11> {
    return await this.service.createOperatore11({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore11)
  async updateOperatore11(
    @graphql.Args() args: UpdateOperatore11Args
  ): Promise<Operatore11 | null> {
    try {
      return await this.service.updateOperatore11({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore11)
  async deleteOperatore11(
    @graphql.Args() args: DeleteOperatore11Args
  ): Promise<Operatore11 | null> {
    try {
      return await this.service.deleteOperatore11(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
