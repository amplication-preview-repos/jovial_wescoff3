/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore21 } from "./Operatore21";
import { Operatore21CountArgs } from "./Operatore21CountArgs";
import { Operatore21FindManyArgs } from "./Operatore21FindManyArgs";
import { Operatore21FindUniqueArgs } from "./Operatore21FindUniqueArgs";
import { CreateOperatore21Args } from "./CreateOperatore21Args";
import { UpdateOperatore21Args } from "./UpdateOperatore21Args";
import { DeleteOperatore21Args } from "./DeleteOperatore21Args";
import { Operatore21Service } from "../operatore21.service";
@graphql.Resolver(() => Operatore21)
export class Operatore21ResolverBase {
  constructor(protected readonly service: Operatore21Service) {}

  async _operatore21sMeta(
    @graphql.Args() args: Operatore21CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore21])
  async operatore21s(
    @graphql.Args() args: Operatore21FindManyArgs
  ): Promise<Operatore21[]> {
    return this.service.operatore21s(args);
  }

  @graphql.Query(() => Operatore21, { nullable: true })
  async operatore21(
    @graphql.Args() args: Operatore21FindUniqueArgs
  ): Promise<Operatore21 | null> {
    const result = await this.service.operatore21(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore21)
  async createOperatore21(
    @graphql.Args() args: CreateOperatore21Args
  ): Promise<Operatore21> {
    return await this.service.createOperatore21({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore21)
  async updateOperatore21(
    @graphql.Args() args: UpdateOperatore21Args
  ): Promise<Operatore21 | null> {
    try {
      return await this.service.updateOperatore21({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore21)
  async deleteOperatore21(
    @graphql.Args() args: DeleteOperatore21Args
  ): Promise<Operatore21 | null> {
    try {
      return await this.service.deleteOperatore21(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
