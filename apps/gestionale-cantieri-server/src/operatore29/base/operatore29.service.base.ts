/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore29 as PrismaOperatore29 } from "@prisma/client";

export class Operatore29ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore29CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore29.count(args);
  }

  async operatore29s(
    args: Prisma.Operatore29FindManyArgs
  ): Promise<PrismaOperatore29[]> {
    return this.prisma.operatore29.findMany(args);
  }
  async operatore29(
    args: Prisma.Operatore29FindUniqueArgs
  ): Promise<PrismaOperatore29 | null> {
    return this.prisma.operatore29.findUnique(args);
  }
  async createOperatore29(
    args: Prisma.Operatore29CreateArgs
  ): Promise<PrismaOperatore29> {
    return this.prisma.operatore29.create(args);
  }
  async updateOperatore29(
    args: Prisma.Operatore29UpdateArgs
  ): Promise<PrismaOperatore29> {
    return this.prisma.operatore29.update(args);
  }
  async deleteOperatore29(
    args: Prisma.Operatore29DeleteArgs
  ): Promise<PrismaOperatore29> {
    return this.prisma.operatore29.delete(args);
  }
}
