/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore27 as PrismaOperatore27 } from "@prisma/client";

export class Operatore27ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore27CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore27.count(args);
  }

  async operatore27s(
    args: Prisma.Operatore27FindManyArgs
  ): Promise<PrismaOperatore27[]> {
    return this.prisma.operatore27.findMany(args);
  }
  async operatore27(
    args: Prisma.Operatore27FindUniqueArgs
  ): Promise<PrismaOperatore27 | null> {
    return this.prisma.operatore27.findUnique(args);
  }
  async createOperatore27(
    args: Prisma.Operatore27CreateArgs
  ): Promise<PrismaOperatore27> {
    return this.prisma.operatore27.create(args);
  }
  async updateOperatore27(
    args: Prisma.Operatore27UpdateArgs
  ): Promise<PrismaOperatore27> {
    return this.prisma.operatore27.update(args);
  }
  async deleteOperatore27(
    args: Prisma.Operatore27DeleteArgs
  ): Promise<PrismaOperatore27> {
    return this.prisma.operatore27.delete(args);
  }
}
