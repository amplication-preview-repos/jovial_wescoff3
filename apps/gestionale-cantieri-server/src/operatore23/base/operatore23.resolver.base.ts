/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore23 } from "./Operatore23";
import { Operatore23CountArgs } from "./Operatore23CountArgs";
import { Operatore23FindManyArgs } from "./Operatore23FindManyArgs";
import { Operatore23FindUniqueArgs } from "./Operatore23FindUniqueArgs";
import { CreateOperatore23Args } from "./CreateOperatore23Args";
import { UpdateOperatore23Args } from "./UpdateOperatore23Args";
import { DeleteOperatore23Args } from "./DeleteOperatore23Args";
import { Operatore23Service } from "../operatore23.service";
@graphql.Resolver(() => Operatore23)
export class Operatore23ResolverBase {
  constructor(protected readonly service: Operatore23Service) {}

  async _operatore23sMeta(
    @graphql.Args() args: Operatore23CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore23])
  async operatore23s(
    @graphql.Args() args: Operatore23FindManyArgs
  ): Promise<Operatore23[]> {
    return this.service.operatore23s(args);
  }

  @graphql.Query(() => Operatore23, { nullable: true })
  async operatore23(
    @graphql.Args() args: Operatore23FindUniqueArgs
  ): Promise<Operatore23 | null> {
    const result = await this.service.operatore23(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore23)
  async createOperatore23(
    @graphql.Args() args: CreateOperatore23Args
  ): Promise<Operatore23> {
    return await this.service.createOperatore23({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore23)
  async updateOperatore23(
    @graphql.Args() args: UpdateOperatore23Args
  ): Promise<Operatore23 | null> {
    try {
      return await this.service.updateOperatore23({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore23)
  async deleteOperatore23(
    @graphql.Args() args: DeleteOperatore23Args
  ): Promise<Operatore23 | null> {
    try {
      return await this.service.deleteOperatore23(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
