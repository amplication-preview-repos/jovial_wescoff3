/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore1 as PrismaOperatore1 } from "@prisma/client";

export class Operatore1ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore1CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore1.count(args);
  }

  async operatore1s(
    args: Prisma.Operatore1FindManyArgs
  ): Promise<PrismaOperatore1[]> {
    return this.prisma.operatore1.findMany(args);
  }
  async operatore1(
    args: Prisma.Operatore1FindUniqueArgs
  ): Promise<PrismaOperatore1 | null> {
    return this.prisma.operatore1.findUnique(args);
  }
  async createOperatore1(
    args: Prisma.Operatore1CreateArgs
  ): Promise<PrismaOperatore1> {
    return this.prisma.operatore1.create(args);
  }
  async updateOperatore1(
    args: Prisma.Operatore1UpdateArgs
  ): Promise<PrismaOperatore1> {
    return this.prisma.operatore1.update(args);
  }
  async deleteOperatore1(
    args: Prisma.Operatore1DeleteArgs
  ): Promise<PrismaOperatore1> {
    return this.prisma.operatore1.delete(args);
  }
}
