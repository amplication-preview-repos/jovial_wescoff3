/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore1 } from "./Operatore1";
import { Operatore1CountArgs } from "./Operatore1CountArgs";
import { Operatore1FindManyArgs } from "./Operatore1FindManyArgs";
import { Operatore1FindUniqueArgs } from "./Operatore1FindUniqueArgs";
import { CreateOperatore1Args } from "./CreateOperatore1Args";
import { UpdateOperatore1Args } from "./UpdateOperatore1Args";
import { DeleteOperatore1Args } from "./DeleteOperatore1Args";
import { Operatore1Service } from "../operatore1.service";
@graphql.Resolver(() => Operatore1)
export class Operatore1ResolverBase {
  constructor(protected readonly service: Operatore1Service) {}

  async _operatore1sMeta(
    @graphql.Args() args: Operatore1CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore1])
  async operatore1s(
    @graphql.Args() args: Operatore1FindManyArgs
  ): Promise<Operatore1[]> {
    return this.service.operatore1s(args);
  }

  @graphql.Query(() => Operatore1, { nullable: true })
  async operatore1(
    @graphql.Args() args: Operatore1FindUniqueArgs
  ): Promise<Operatore1 | null> {
    const result = await this.service.operatore1(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore1)
  async createOperatore1(
    @graphql.Args() args: CreateOperatore1Args
  ): Promise<Operatore1> {
    return await this.service.createOperatore1({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore1)
  async updateOperatore1(
    @graphql.Args() args: UpdateOperatore1Args
  ): Promise<Operatore1 | null> {
    try {
      return await this.service.updateOperatore1({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore1)
  async deleteOperatore1(
    @graphql.Args() args: DeleteOperatore1Args
  ): Promise<Operatore1 | null> {
    try {
      return await this.service.deleteOperatore1(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
