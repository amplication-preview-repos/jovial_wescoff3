/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore3 as PrismaOperatore3 } from "@prisma/client";

export class Operatore3ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore3CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore3.count(args);
  }

  async operatore3s(
    args: Prisma.Operatore3FindManyArgs
  ): Promise<PrismaOperatore3[]> {
    return this.prisma.operatore3.findMany(args);
  }
  async operatore3(
    args: Prisma.Operatore3FindUniqueArgs
  ): Promise<PrismaOperatore3 | null> {
    return this.prisma.operatore3.findUnique(args);
  }
  async createOperatore3(
    args: Prisma.Operatore3CreateArgs
  ): Promise<PrismaOperatore3> {
    return this.prisma.operatore3.create(args);
  }
  async updateOperatore3(
    args: Prisma.Operatore3UpdateArgs
  ): Promise<PrismaOperatore3> {
    return this.prisma.operatore3.update(args);
  }
  async deleteOperatore3(
    args: Prisma.Operatore3DeleteArgs
  ): Promise<PrismaOperatore3> {
    return this.prisma.operatore3.delete(args);
  }
}
