/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore3 } from "./Operatore3";
import { Operatore3CountArgs } from "./Operatore3CountArgs";
import { Operatore3FindManyArgs } from "./Operatore3FindManyArgs";
import { Operatore3FindUniqueArgs } from "./Operatore3FindUniqueArgs";
import { CreateOperatore3Args } from "./CreateOperatore3Args";
import { UpdateOperatore3Args } from "./UpdateOperatore3Args";
import { DeleteOperatore3Args } from "./DeleteOperatore3Args";
import { Operatore3Service } from "../operatore3.service";
@graphql.Resolver(() => Operatore3)
export class Operatore3ResolverBase {
  constructor(protected readonly service: Operatore3Service) {}

  async _operatore3sMeta(
    @graphql.Args() args: Operatore3CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore3])
  async operatore3s(
    @graphql.Args() args: Operatore3FindManyArgs
  ): Promise<Operatore3[]> {
    return this.service.operatore3s(args);
  }

  @graphql.Query(() => Operatore3, { nullable: true })
  async operatore3(
    @graphql.Args() args: Operatore3FindUniqueArgs
  ): Promise<Operatore3 | null> {
    const result = await this.service.operatore3(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore3)
  async createOperatore3(
    @graphql.Args() args: CreateOperatore3Args
  ): Promise<Operatore3> {
    return await this.service.createOperatore3({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore3)
  async updateOperatore3(
    @graphql.Args() args: UpdateOperatore3Args
  ): Promise<Operatore3 | null> {
    try {
      return await this.service.updateOperatore3({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore3)
  async deleteOperatore3(
    @graphql.Args() args: DeleteOperatore3Args
  ): Promise<Operatore3 | null> {
    try {
      return await this.service.deleteOperatore3(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
