/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore28 } from "./Operatore28";
import { Operatore28CountArgs } from "./Operatore28CountArgs";
import { Operatore28FindManyArgs } from "./Operatore28FindManyArgs";
import { Operatore28FindUniqueArgs } from "./Operatore28FindUniqueArgs";
import { CreateOperatore28Args } from "./CreateOperatore28Args";
import { UpdateOperatore28Args } from "./UpdateOperatore28Args";
import { DeleteOperatore28Args } from "./DeleteOperatore28Args";
import { Operatore28Service } from "../operatore28.service";
@graphql.Resolver(() => Operatore28)
export class Operatore28ResolverBase {
  constructor(protected readonly service: Operatore28Service) {}

  async _operatore28sMeta(
    @graphql.Args() args: Operatore28CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore28])
  async operatore28s(
    @graphql.Args() args: Operatore28FindManyArgs
  ): Promise<Operatore28[]> {
    return this.service.operatore28s(args);
  }

  @graphql.Query(() => Operatore28, { nullable: true })
  async operatore28(
    @graphql.Args() args: Operatore28FindUniqueArgs
  ): Promise<Operatore28 | null> {
    const result = await this.service.operatore28(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore28)
  async createOperatore28(
    @graphql.Args() args: CreateOperatore28Args
  ): Promise<Operatore28> {
    return await this.service.createOperatore28({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore28)
  async updateOperatore28(
    @graphql.Args() args: UpdateOperatore28Args
  ): Promise<Operatore28 | null> {
    try {
      return await this.service.updateOperatore28({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore28)
  async deleteOperatore28(
    @graphql.Args() args: DeleteOperatore28Args
  ): Promise<Operatore28 | null> {
    try {
      return await this.service.deleteOperatore28(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
