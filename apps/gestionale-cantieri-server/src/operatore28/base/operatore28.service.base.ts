/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore28 as PrismaOperatore28 } from "@prisma/client";

export class Operatore28ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore28CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore28.count(args);
  }

  async operatore28s(
    args: Prisma.Operatore28FindManyArgs
  ): Promise<PrismaOperatore28[]> {
    return this.prisma.operatore28.findMany(args);
  }
  async operatore28(
    args: Prisma.Operatore28FindUniqueArgs
  ): Promise<PrismaOperatore28 | null> {
    return this.prisma.operatore28.findUnique(args);
  }
  async createOperatore28(
    args: Prisma.Operatore28CreateArgs
  ): Promise<PrismaOperatore28> {
    return this.prisma.operatore28.create(args);
  }
  async updateOperatore28(
    args: Prisma.Operatore28UpdateArgs
  ): Promise<PrismaOperatore28> {
    return this.prisma.operatore28.update(args);
  }
  async deleteOperatore28(
    args: Prisma.Operatore28DeleteArgs
  ): Promise<PrismaOperatore28> {
    return this.prisma.operatore28.delete(args);
  }
}
