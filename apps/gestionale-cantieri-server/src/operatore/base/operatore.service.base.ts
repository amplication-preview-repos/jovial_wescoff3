/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Operatore as PrismaOperatore,
  Lavorazioni as PrismaLavorazioni,
} from "@prisma/client";

export class OperatoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OperatoreCountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore.count(args);
  }

  async operatores(
    args: Prisma.OperatoreFindManyArgs
  ): Promise<PrismaOperatore[]> {
    return this.prisma.operatore.findMany(args);
  }
  async operatore(
    args: Prisma.OperatoreFindUniqueArgs
  ): Promise<PrismaOperatore | null> {
    return this.prisma.operatore.findUnique(args);
  }
  async createOperatore(
    args: Prisma.OperatoreCreateArgs
  ): Promise<PrismaOperatore> {
    return this.prisma.operatore.create(args);
  }
  async updateOperatore(
    args: Prisma.OperatoreUpdateArgs
  ): Promise<PrismaOperatore> {
    return this.prisma.operatore.update(args);
  }
  async deleteOperatore(
    args: Prisma.OperatoreDeleteArgs
  ): Promise<PrismaOperatore> {
    return this.prisma.operatore.delete(args);
  }

  async findLavorazionis(
    parentId: string,
    args: Prisma.LavorazioniFindManyArgs
  ): Promise<PrismaLavorazioni[]> {
    return this.prisma.operatore
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lavorazionis(args);
  }
}
