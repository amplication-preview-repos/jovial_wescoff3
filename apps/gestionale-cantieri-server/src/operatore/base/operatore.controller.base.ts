/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OperatoreService } from "../operatore.service";
import { OperatoreCreateInput } from "./OperatoreCreateInput";
import { Operatore } from "./Operatore";
import { OperatoreFindManyArgs } from "./OperatoreFindManyArgs";
import { OperatoreWhereUniqueInput } from "./OperatoreWhereUniqueInput";
import { OperatoreUpdateInput } from "./OperatoreUpdateInput";
import { LavorazioniFindManyArgs } from "../../lavorazioni/base/LavorazioniFindManyArgs";
import { Lavorazioni } from "../../lavorazioni/base/Lavorazioni";
import { LavorazioniWhereUniqueInput } from "../../lavorazioni/base/LavorazioniWhereUniqueInput";

export class OperatoreControllerBase {
  constructor(protected readonly service: OperatoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore })
  async createOperatore(
    @common.Body() data: OperatoreCreateInput
  ): Promise<Operatore> {
    return await this.service.createOperatore({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        cognome: true,
        email: true,
        password: true,
        permessiSpeciali: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore] })
  @ApiNestedQuery(OperatoreFindManyArgs)
  async operatores(@common.Req() request: Request): Promise<Operatore[]> {
    const args = plainToClass(OperatoreFindManyArgs, request.query);
    return this.service.operatores({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        cognome: true,
        email: true,
        password: true,
        permessiSpeciali: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore(
    @common.Param() params: OperatoreWhereUniqueInput
  ): Promise<Operatore | null> {
    const result = await this.service.operatore({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        cognome: true,
        email: true,
        password: true,
        permessiSpeciali: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore(
    @common.Param() params: OperatoreWhereUniqueInput,
    @common.Body() data: OperatoreUpdateInput
  ): Promise<Operatore | null> {
    try {
      return await this.service.updateOperatore({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          cognome: true,
          email: true,
          password: true,
          permessiSpeciali: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore(
    @common.Param() params: OperatoreWhereUniqueInput
  ): Promise<Operatore | null> {
    try {
      return await this.service.deleteOperatore({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          cognome: true,
          email: true,
          password: true,
          permessiSpeciali: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lavorazionis")
  @ApiNestedQuery(LavorazioniFindManyArgs)
  async findLavorazionis(
    @common.Req() request: Request,
    @common.Param() params: OperatoreWhereUniqueInput
  ): Promise<Lavorazioni[]> {
    const query = plainToClass(LavorazioniFindManyArgs, request.query);
    const results = await this.service.findLavorazionis(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        descrizione: true,
        dataInizio: true,
        dataFine: true,
        nome: true,
        ente: true,

        operatore: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lavorazionis")
  async connectLavorazionis(
    @common.Param() params: OperatoreWhereUniqueInput,
    @common.Body() body: LavorazioniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lavorazionis: {
        connect: body,
      },
    };
    await this.service.updateOperatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lavorazionis")
  async updateLavorazionis(
    @common.Param() params: OperatoreWhereUniqueInput,
    @common.Body() body: LavorazioniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lavorazionis: {
        set: body,
      },
    };
    await this.service.updateOperatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lavorazionis")
  async disconnectLavorazionis(
    @common.Param() params: OperatoreWhereUniqueInput,
    @common.Body() body: LavorazioniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lavorazionis: {
        disconnect: body,
      },
    };
    await this.service.updateOperatore({
      where: params,
      data,
      select: { id: true },
    });
  }
}
