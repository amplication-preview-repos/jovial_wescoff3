/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore14 as PrismaOperatore14 } from "@prisma/client";

export class Operatore14ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore14CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore14.count(args);
  }

  async operatore14s(
    args: Prisma.Operatore14FindManyArgs
  ): Promise<PrismaOperatore14[]> {
    return this.prisma.operatore14.findMany(args);
  }
  async operatore14(
    args: Prisma.Operatore14FindUniqueArgs
  ): Promise<PrismaOperatore14 | null> {
    return this.prisma.operatore14.findUnique(args);
  }
  async createOperatore14(
    args: Prisma.Operatore14CreateArgs
  ): Promise<PrismaOperatore14> {
    return this.prisma.operatore14.create(args);
  }
  async updateOperatore14(
    args: Prisma.Operatore14UpdateArgs
  ): Promise<PrismaOperatore14> {
    return this.prisma.operatore14.update(args);
  }
  async deleteOperatore14(
    args: Prisma.Operatore14DeleteArgs
  ): Promise<PrismaOperatore14> {
    return this.prisma.operatore14.delete(args);
  }
}
