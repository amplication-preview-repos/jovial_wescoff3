/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore14 } from "./Operatore14";
import { Operatore14CountArgs } from "./Operatore14CountArgs";
import { Operatore14FindManyArgs } from "./Operatore14FindManyArgs";
import { Operatore14FindUniqueArgs } from "./Operatore14FindUniqueArgs";
import { CreateOperatore14Args } from "./CreateOperatore14Args";
import { UpdateOperatore14Args } from "./UpdateOperatore14Args";
import { DeleteOperatore14Args } from "./DeleteOperatore14Args";
import { Operatore14Service } from "../operatore14.service";
@graphql.Resolver(() => Operatore14)
export class Operatore14ResolverBase {
  constructor(protected readonly service: Operatore14Service) {}

  async _operatore14sMeta(
    @graphql.Args() args: Operatore14CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore14])
  async operatore14s(
    @graphql.Args() args: Operatore14FindManyArgs
  ): Promise<Operatore14[]> {
    return this.service.operatore14s(args);
  }

  @graphql.Query(() => Operatore14, { nullable: true })
  async operatore14(
    @graphql.Args() args: Operatore14FindUniqueArgs
  ): Promise<Operatore14 | null> {
    const result = await this.service.operatore14(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore14)
  async createOperatore14(
    @graphql.Args() args: CreateOperatore14Args
  ): Promise<Operatore14> {
    return await this.service.createOperatore14({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore14)
  async updateOperatore14(
    @graphql.Args() args: UpdateOperatore14Args
  ): Promise<Operatore14 | null> {
    try {
      return await this.service.updateOperatore14({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore14)
  async deleteOperatore14(
    @graphql.Args() args: DeleteOperatore14Args
  ): Promise<Operatore14 | null> {
    try {
      return await this.service.deleteOperatore14(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
