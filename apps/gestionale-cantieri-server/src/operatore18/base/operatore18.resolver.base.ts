/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore18 } from "./Operatore18";
import { Operatore18CountArgs } from "./Operatore18CountArgs";
import { Operatore18FindManyArgs } from "./Operatore18FindManyArgs";
import { Operatore18FindUniqueArgs } from "./Operatore18FindUniqueArgs";
import { CreateOperatore18Args } from "./CreateOperatore18Args";
import { UpdateOperatore18Args } from "./UpdateOperatore18Args";
import { DeleteOperatore18Args } from "./DeleteOperatore18Args";
import { Operatore18Service } from "../operatore18.service";
@graphql.Resolver(() => Operatore18)
export class Operatore18ResolverBase {
  constructor(protected readonly service: Operatore18Service) {}

  async _operatore18sMeta(
    @graphql.Args() args: Operatore18CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore18])
  async operatore18s(
    @graphql.Args() args: Operatore18FindManyArgs
  ): Promise<Operatore18[]> {
    return this.service.operatore18s(args);
  }

  @graphql.Query(() => Operatore18, { nullable: true })
  async operatore18(
    @graphql.Args() args: Operatore18FindUniqueArgs
  ): Promise<Operatore18 | null> {
    const result = await this.service.operatore18(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore18)
  async createOperatore18(
    @graphql.Args() args: CreateOperatore18Args
  ): Promise<Operatore18> {
    return await this.service.createOperatore18({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore18)
  async updateOperatore18(
    @graphql.Args() args: UpdateOperatore18Args
  ): Promise<Operatore18 | null> {
    try {
      return await this.service.updateOperatore18({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore18)
  async deleteOperatore18(
    @graphql.Args() args: DeleteOperatore18Args
  ): Promise<Operatore18 | null> {
    try {
      return await this.service.deleteOperatore18(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
