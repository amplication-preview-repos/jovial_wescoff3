/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore7 as PrismaOperatore7 } from "@prisma/client";

export class Operatore7ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore7CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore7.count(args);
  }

  async operatore7s(
    args: Prisma.Operatore7FindManyArgs
  ): Promise<PrismaOperatore7[]> {
    return this.prisma.operatore7.findMany(args);
  }
  async operatore7(
    args: Prisma.Operatore7FindUniqueArgs
  ): Promise<PrismaOperatore7 | null> {
    return this.prisma.operatore7.findUnique(args);
  }
  async createOperatore7(
    args: Prisma.Operatore7CreateArgs
  ): Promise<PrismaOperatore7> {
    return this.prisma.operatore7.create(args);
  }
  async updateOperatore7(
    args: Prisma.Operatore7UpdateArgs
  ): Promise<PrismaOperatore7> {
    return this.prisma.operatore7.update(args);
  }
  async deleteOperatore7(
    args: Prisma.Operatore7DeleteArgs
  ): Promise<PrismaOperatore7> {
    return this.prisma.operatore7.delete(args);
  }
}
