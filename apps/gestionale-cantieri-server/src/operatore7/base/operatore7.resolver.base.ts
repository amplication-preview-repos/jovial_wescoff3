/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore7 } from "./Operatore7";
import { Operatore7CountArgs } from "./Operatore7CountArgs";
import { Operatore7FindManyArgs } from "./Operatore7FindManyArgs";
import { Operatore7FindUniqueArgs } from "./Operatore7FindUniqueArgs";
import { CreateOperatore7Args } from "./CreateOperatore7Args";
import { UpdateOperatore7Args } from "./UpdateOperatore7Args";
import { DeleteOperatore7Args } from "./DeleteOperatore7Args";
import { Operatore7Service } from "../operatore7.service";
@graphql.Resolver(() => Operatore7)
export class Operatore7ResolverBase {
  constructor(protected readonly service: Operatore7Service) {}

  async _operatore7sMeta(
    @graphql.Args() args: Operatore7CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore7])
  async operatore7s(
    @graphql.Args() args: Operatore7FindManyArgs
  ): Promise<Operatore7[]> {
    return this.service.operatore7s(args);
  }

  @graphql.Query(() => Operatore7, { nullable: true })
  async operatore7(
    @graphql.Args() args: Operatore7FindUniqueArgs
  ): Promise<Operatore7 | null> {
    const result = await this.service.operatore7(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore7)
  async createOperatore7(
    @graphql.Args() args: CreateOperatore7Args
  ): Promise<Operatore7> {
    return await this.service.createOperatore7({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore7)
  async updateOperatore7(
    @graphql.Args() args: UpdateOperatore7Args
  ): Promise<Operatore7 | null> {
    try {
      return await this.service.updateOperatore7({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore7)
  async deleteOperatore7(
    @graphql.Args() args: DeleteOperatore7Args
  ): Promise<Operatore7 | null> {
    try {
      return await this.service.deleteOperatore7(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
