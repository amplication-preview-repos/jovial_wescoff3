/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Operatore16Service } from "../operatore16.service";
import { Operatore16CreateInput } from "./Operatore16CreateInput";
import { Operatore16 } from "./Operatore16";
import { Operatore16FindManyArgs } from "./Operatore16FindManyArgs";
import { Operatore16WhereUniqueInput } from "./Operatore16WhereUniqueInput";
import { Operatore16UpdateInput } from "./Operatore16UpdateInput";

export class Operatore16ControllerBase {
  constructor(protected readonly service: Operatore16Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore16 })
  async createOperatore16(
    @common.Body() data: Operatore16CreateInput
  ): Promise<Operatore16> {
    return await this.service.createOperatore16({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore16] })
  @ApiNestedQuery(Operatore16FindManyArgs)
  async operatore16s(@common.Req() request: Request): Promise<Operatore16[]> {
    const args = plainToClass(Operatore16FindManyArgs, request.query);
    return this.service.operatore16s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore16 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore16(
    @common.Param() params: Operatore16WhereUniqueInput
  ): Promise<Operatore16 | null> {
    const result = await this.service.operatore16({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore16 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore16(
    @common.Param() params: Operatore16WhereUniqueInput,
    @common.Body() data: Operatore16UpdateInput
  ): Promise<Operatore16 | null> {
    try {
      return await this.service.updateOperatore16({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore16 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore16(
    @common.Param() params: Operatore16WhereUniqueInput
  ): Promise<Operatore16 | null> {
    try {
      return await this.service.deleteOperatore16({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
