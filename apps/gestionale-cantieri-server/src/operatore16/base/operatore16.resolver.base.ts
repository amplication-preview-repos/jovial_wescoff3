/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore16 } from "./Operatore16";
import { Operatore16CountArgs } from "./Operatore16CountArgs";
import { Operatore16FindManyArgs } from "./Operatore16FindManyArgs";
import { Operatore16FindUniqueArgs } from "./Operatore16FindUniqueArgs";
import { CreateOperatore16Args } from "./CreateOperatore16Args";
import { UpdateOperatore16Args } from "./UpdateOperatore16Args";
import { DeleteOperatore16Args } from "./DeleteOperatore16Args";
import { Operatore16Service } from "../operatore16.service";
@graphql.Resolver(() => Operatore16)
export class Operatore16ResolverBase {
  constructor(protected readonly service: Operatore16Service) {}

  async _operatore16sMeta(
    @graphql.Args() args: Operatore16CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore16])
  async operatore16s(
    @graphql.Args() args: Operatore16FindManyArgs
  ): Promise<Operatore16[]> {
    return this.service.operatore16s(args);
  }

  @graphql.Query(() => Operatore16, { nullable: true })
  async operatore16(
    @graphql.Args() args: Operatore16FindUniqueArgs
  ): Promise<Operatore16 | null> {
    const result = await this.service.operatore16(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore16)
  async createOperatore16(
    @graphql.Args() args: CreateOperatore16Args
  ): Promise<Operatore16> {
    return await this.service.createOperatore16({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore16)
  async updateOperatore16(
    @graphql.Args() args: UpdateOperatore16Args
  ): Promise<Operatore16 | null> {
    try {
      return await this.service.updateOperatore16({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore16)
  async deleteOperatore16(
    @graphql.Args() args: DeleteOperatore16Args
  ): Promise<Operatore16 | null> {
    try {
      return await this.service.deleteOperatore16(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
