/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore16 as PrismaOperatore16 } from "@prisma/client";

export class Operatore16ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore16CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore16.count(args);
  }

  async operatore16s(
    args: Prisma.Operatore16FindManyArgs
  ): Promise<PrismaOperatore16[]> {
    return this.prisma.operatore16.findMany(args);
  }
  async operatore16(
    args: Prisma.Operatore16FindUniqueArgs
  ): Promise<PrismaOperatore16 | null> {
    return this.prisma.operatore16.findUnique(args);
  }
  async createOperatore16(
    args: Prisma.Operatore16CreateArgs
  ): Promise<PrismaOperatore16> {
    return this.prisma.operatore16.create(args);
  }
  async updateOperatore16(
    args: Prisma.Operatore16UpdateArgs
  ): Promise<PrismaOperatore16> {
    return this.prisma.operatore16.update(args);
  }
  async deleteOperatore16(
    args: Prisma.Operatore16DeleteArgs
  ): Promise<PrismaOperatore16> {
    return this.prisma.operatore16.delete(args);
  }
}
