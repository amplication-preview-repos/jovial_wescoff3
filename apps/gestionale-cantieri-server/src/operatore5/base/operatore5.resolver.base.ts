/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore5 } from "./Operatore5";
import { Operatore5CountArgs } from "./Operatore5CountArgs";
import { Operatore5FindManyArgs } from "./Operatore5FindManyArgs";
import { Operatore5FindUniqueArgs } from "./Operatore5FindUniqueArgs";
import { CreateOperatore5Args } from "./CreateOperatore5Args";
import { UpdateOperatore5Args } from "./UpdateOperatore5Args";
import { DeleteOperatore5Args } from "./DeleteOperatore5Args";
import { Operatore5Service } from "../operatore5.service";
@graphql.Resolver(() => Operatore5)
export class Operatore5ResolverBase {
  constructor(protected readonly service: Operatore5Service) {}

  async _operatore5sMeta(
    @graphql.Args() args: Operatore5CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore5])
  async operatore5s(
    @graphql.Args() args: Operatore5FindManyArgs
  ): Promise<Operatore5[]> {
    return this.service.operatore5s(args);
  }

  @graphql.Query(() => Operatore5, { nullable: true })
  async operatore5(
    @graphql.Args() args: Operatore5FindUniqueArgs
  ): Promise<Operatore5 | null> {
    const result = await this.service.operatore5(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore5)
  async createOperatore5(
    @graphql.Args() args: CreateOperatore5Args
  ): Promise<Operatore5> {
    return await this.service.createOperatore5({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore5)
  async updateOperatore5(
    @graphql.Args() args: UpdateOperatore5Args
  ): Promise<Operatore5 | null> {
    try {
      return await this.service.updateOperatore5({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore5)
  async deleteOperatore5(
    @graphql.Args() args: DeleteOperatore5Args
  ): Promise<Operatore5 | null> {
    try {
      return await this.service.deleteOperatore5(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
