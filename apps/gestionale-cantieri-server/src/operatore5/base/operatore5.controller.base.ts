/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Operatore5Service } from "../operatore5.service";
import { Operatore5CreateInput } from "./Operatore5CreateInput";
import { Operatore5 } from "./Operatore5";
import { Operatore5FindManyArgs } from "./Operatore5FindManyArgs";
import { Operatore5WhereUniqueInput } from "./Operatore5WhereUniqueInput";
import { Operatore5UpdateInput } from "./Operatore5UpdateInput";

export class Operatore5ControllerBase {
  constructor(protected readonly service: Operatore5Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore5 })
  async createOperatore5(
    @common.Body() data: Operatore5CreateInput
  ): Promise<Operatore5> {
    return await this.service.createOperatore5({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        permessiSpeciali: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore5] })
  @ApiNestedQuery(Operatore5FindManyArgs)
  async operatore5s(@common.Req() request: Request): Promise<Operatore5[]> {
    const args = plainToClass(Operatore5FindManyArgs, request.query);
    return this.service.operatore5s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        permessiSpeciali: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore5 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore5(
    @common.Param() params: Operatore5WhereUniqueInput
  ): Promise<Operatore5 | null> {
    const result = await this.service.operatore5({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
        permessiSpeciali: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore5 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore5(
    @common.Param() params: Operatore5WhereUniqueInput,
    @common.Body() data: Operatore5UpdateInput
  ): Promise<Operatore5 | null> {
    try {
      return await this.service.updateOperatore5({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          permessiSpeciali: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore5 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore5(
    @common.Param() params: Operatore5WhereUniqueInput
  ): Promise<Operatore5 | null> {
    try {
      return await this.service.deleteOperatore5({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
          permessiSpeciali: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
