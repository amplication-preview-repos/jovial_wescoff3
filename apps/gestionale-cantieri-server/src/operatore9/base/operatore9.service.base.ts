/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore9 as PrismaOperatore9 } from "@prisma/client";

export class Operatore9ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore9CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore9.count(args);
  }

  async operatore9s(
    args: Prisma.Operatore9FindManyArgs
  ): Promise<PrismaOperatore9[]> {
    return this.prisma.operatore9.findMany(args);
  }
  async operatore9(
    args: Prisma.Operatore9FindUniqueArgs
  ): Promise<PrismaOperatore9 | null> {
    return this.prisma.operatore9.findUnique(args);
  }
  async createOperatore9(
    args: Prisma.Operatore9CreateArgs
  ): Promise<PrismaOperatore9> {
    return this.prisma.operatore9.create(args);
  }
  async updateOperatore9(
    args: Prisma.Operatore9UpdateArgs
  ): Promise<PrismaOperatore9> {
    return this.prisma.operatore9.update(args);
  }
  async deleteOperatore9(
    args: Prisma.Operatore9DeleteArgs
  ): Promise<PrismaOperatore9> {
    return this.prisma.operatore9.delete(args);
  }
}
