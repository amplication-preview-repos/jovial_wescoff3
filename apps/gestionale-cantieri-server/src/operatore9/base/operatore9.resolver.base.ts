/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore9 } from "./Operatore9";
import { Operatore9CountArgs } from "./Operatore9CountArgs";
import { Operatore9FindManyArgs } from "./Operatore9FindManyArgs";
import { Operatore9FindUniqueArgs } from "./Operatore9FindUniqueArgs";
import { CreateOperatore9Args } from "./CreateOperatore9Args";
import { UpdateOperatore9Args } from "./UpdateOperatore9Args";
import { DeleteOperatore9Args } from "./DeleteOperatore9Args";
import { Operatore9Service } from "../operatore9.service";
@graphql.Resolver(() => Operatore9)
export class Operatore9ResolverBase {
  constructor(protected readonly service: Operatore9Service) {}

  async _operatore9sMeta(
    @graphql.Args() args: Operatore9CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore9])
  async operatore9s(
    @graphql.Args() args: Operatore9FindManyArgs
  ): Promise<Operatore9[]> {
    return this.service.operatore9s(args);
  }

  @graphql.Query(() => Operatore9, { nullable: true })
  async operatore9(
    @graphql.Args() args: Operatore9FindUniqueArgs
  ): Promise<Operatore9 | null> {
    const result = await this.service.operatore9(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore9)
  async createOperatore9(
    @graphql.Args() args: CreateOperatore9Args
  ): Promise<Operatore9> {
    return await this.service.createOperatore9({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore9)
  async updateOperatore9(
    @graphql.Args() args: UpdateOperatore9Args
  ): Promise<Operatore9 | null> {
    try {
      return await this.service.updateOperatore9({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore9)
  async deleteOperatore9(
    @graphql.Args() args: DeleteOperatore9Args
  ): Promise<Operatore9 | null> {
    try {
      return await this.service.deleteOperatore9(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
