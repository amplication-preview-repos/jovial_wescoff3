/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore2 } from "./Operatore2";
import { Operatore2CountArgs } from "./Operatore2CountArgs";
import { Operatore2FindManyArgs } from "./Operatore2FindManyArgs";
import { Operatore2FindUniqueArgs } from "./Operatore2FindUniqueArgs";
import { CreateOperatore2Args } from "./CreateOperatore2Args";
import { UpdateOperatore2Args } from "./UpdateOperatore2Args";
import { DeleteOperatore2Args } from "./DeleteOperatore2Args";
import { Operatore2Service } from "../operatore2.service";
@graphql.Resolver(() => Operatore2)
export class Operatore2ResolverBase {
  constructor(protected readonly service: Operatore2Service) {}

  async _operatore2sMeta(
    @graphql.Args() args: Operatore2CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore2])
  async operatore2s(
    @graphql.Args() args: Operatore2FindManyArgs
  ): Promise<Operatore2[]> {
    return this.service.operatore2s(args);
  }

  @graphql.Query(() => Operatore2, { nullable: true })
  async operatore2(
    @graphql.Args() args: Operatore2FindUniqueArgs
  ): Promise<Operatore2 | null> {
    const result = await this.service.operatore2(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore2)
  async createOperatore2(
    @graphql.Args() args: CreateOperatore2Args
  ): Promise<Operatore2> {
    return await this.service.createOperatore2({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore2)
  async updateOperatore2(
    @graphql.Args() args: UpdateOperatore2Args
  ): Promise<Operatore2 | null> {
    try {
      return await this.service.updateOperatore2({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore2)
  async deleteOperatore2(
    @graphql.Args() args: DeleteOperatore2Args
  ): Promise<Operatore2 | null> {
    try {
      return await this.service.deleteOperatore2(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
