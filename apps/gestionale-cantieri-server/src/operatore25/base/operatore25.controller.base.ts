/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Operatore25Service } from "../operatore25.service";
import { Operatore25CreateInput } from "./Operatore25CreateInput";
import { Operatore25 } from "./Operatore25";
import { Operatore25FindManyArgs } from "./Operatore25FindManyArgs";
import { Operatore25WhereUniqueInput } from "./Operatore25WhereUniqueInput";
import { Operatore25UpdateInput } from "./Operatore25UpdateInput";

export class Operatore25ControllerBase {
  constructor(protected readonly service: Operatore25Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore25 })
  async createOperatore25(
    @common.Body() data: Operatore25CreateInput
  ): Promise<Operatore25> {
    return await this.service.createOperatore25({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore25] })
  @ApiNestedQuery(Operatore25FindManyArgs)
  async operatore25s(@common.Req() request: Request): Promise<Operatore25[]> {
    const args = plainToClass(Operatore25FindManyArgs, request.query);
    return this.service.operatore25s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore25 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore25(
    @common.Param() params: Operatore25WhereUniqueInput
  ): Promise<Operatore25 | null> {
    const result = await this.service.operatore25({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore25 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore25(
    @common.Param() params: Operatore25WhereUniqueInput,
    @common.Body() data: Operatore25UpdateInput
  ): Promise<Operatore25 | null> {
    try {
      return await this.service.updateOperatore25({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore25 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore25(
    @common.Param() params: Operatore25WhereUniqueInput
  ): Promise<Operatore25 | null> {
    try {
      return await this.service.deleteOperatore25({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
