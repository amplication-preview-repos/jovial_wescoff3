/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore25 } from "./Operatore25";
import { Operatore25CountArgs } from "./Operatore25CountArgs";
import { Operatore25FindManyArgs } from "./Operatore25FindManyArgs";
import { Operatore25FindUniqueArgs } from "./Operatore25FindUniqueArgs";
import { CreateOperatore25Args } from "./CreateOperatore25Args";
import { UpdateOperatore25Args } from "./UpdateOperatore25Args";
import { DeleteOperatore25Args } from "./DeleteOperatore25Args";
import { Operatore25Service } from "../operatore25.service";
@graphql.Resolver(() => Operatore25)
export class Operatore25ResolverBase {
  constructor(protected readonly service: Operatore25Service) {}

  async _operatore25sMeta(
    @graphql.Args() args: Operatore25CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore25])
  async operatore25s(
    @graphql.Args() args: Operatore25FindManyArgs
  ): Promise<Operatore25[]> {
    return this.service.operatore25s(args);
  }

  @graphql.Query(() => Operatore25, { nullable: true })
  async operatore25(
    @graphql.Args() args: Operatore25FindUniqueArgs
  ): Promise<Operatore25 | null> {
    const result = await this.service.operatore25(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore25)
  async createOperatore25(
    @graphql.Args() args: CreateOperatore25Args
  ): Promise<Operatore25> {
    return await this.service.createOperatore25({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore25)
  async updateOperatore25(
    @graphql.Args() args: UpdateOperatore25Args
  ): Promise<Operatore25 | null> {
    try {
      return await this.service.updateOperatore25({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore25)
  async deleteOperatore25(
    @graphql.Args() args: DeleteOperatore25Args
  ): Promise<Operatore25 | null> {
    try {
      return await this.service.deleteOperatore25(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
