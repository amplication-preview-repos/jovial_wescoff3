/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore25 as PrismaOperatore25 } from "@prisma/client";

export class Operatore25ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore25CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore25.count(args);
  }

  async operatore25s(
    args: Prisma.Operatore25FindManyArgs
  ): Promise<PrismaOperatore25[]> {
    return this.prisma.operatore25.findMany(args);
  }
  async operatore25(
    args: Prisma.Operatore25FindUniqueArgs
  ): Promise<PrismaOperatore25 | null> {
    return this.prisma.operatore25.findUnique(args);
  }
  async createOperatore25(
    args: Prisma.Operatore25CreateArgs
  ): Promise<PrismaOperatore25> {
    return this.prisma.operatore25.create(args);
  }
  async updateOperatore25(
    args: Prisma.Operatore25UpdateArgs
  ): Promise<PrismaOperatore25> {
    return this.prisma.operatore25.update(args);
  }
  async deleteOperatore25(
    args: Prisma.Operatore25DeleteArgs
  ): Promise<PrismaOperatore25> {
    return this.prisma.operatore25.delete(args);
  }
}
