/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore17 } from "./Operatore17";
import { Operatore17CountArgs } from "./Operatore17CountArgs";
import { Operatore17FindManyArgs } from "./Operatore17FindManyArgs";
import { Operatore17FindUniqueArgs } from "./Operatore17FindUniqueArgs";
import { CreateOperatore17Args } from "./CreateOperatore17Args";
import { UpdateOperatore17Args } from "./UpdateOperatore17Args";
import { DeleteOperatore17Args } from "./DeleteOperatore17Args";
import { Operatore17Service } from "../operatore17.service";
@graphql.Resolver(() => Operatore17)
export class Operatore17ResolverBase {
  constructor(protected readonly service: Operatore17Service) {}

  async _operatore17sMeta(
    @graphql.Args() args: Operatore17CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore17])
  async operatore17s(
    @graphql.Args() args: Operatore17FindManyArgs
  ): Promise<Operatore17[]> {
    return this.service.operatore17s(args);
  }

  @graphql.Query(() => Operatore17, { nullable: true })
  async operatore17(
    @graphql.Args() args: Operatore17FindUniqueArgs
  ): Promise<Operatore17 | null> {
    const result = await this.service.operatore17(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore17)
  async createOperatore17(
    @graphql.Args() args: CreateOperatore17Args
  ): Promise<Operatore17> {
    return await this.service.createOperatore17({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore17)
  async updateOperatore17(
    @graphql.Args() args: UpdateOperatore17Args
  ): Promise<Operatore17 | null> {
    try {
      return await this.service.updateOperatore17({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore17)
  async deleteOperatore17(
    @graphql.Args() args: DeleteOperatore17Args
  ): Promise<Operatore17 | null> {
    try {
      return await this.service.deleteOperatore17(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
