/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore17 as PrismaOperatore17 } from "@prisma/client";

export class Operatore17ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore17CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore17.count(args);
  }

  async operatore17s(
    args: Prisma.Operatore17FindManyArgs
  ): Promise<PrismaOperatore17[]> {
    return this.prisma.operatore17.findMany(args);
  }
  async operatore17(
    args: Prisma.Operatore17FindUniqueArgs
  ): Promise<PrismaOperatore17 | null> {
    return this.prisma.operatore17.findUnique(args);
  }
  async createOperatore17(
    args: Prisma.Operatore17CreateArgs
  ): Promise<PrismaOperatore17> {
    return this.prisma.operatore17.create(args);
  }
  async updateOperatore17(
    args: Prisma.Operatore17UpdateArgs
  ): Promise<PrismaOperatore17> {
    return this.prisma.operatore17.update(args);
  }
  async deleteOperatore17(
    args: Prisma.Operatore17DeleteArgs
  ): Promise<PrismaOperatore17> {
    return this.prisma.operatore17.delete(args);
  }
}
