/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore20 } from "./Operatore20";
import { Operatore20CountArgs } from "./Operatore20CountArgs";
import { Operatore20FindManyArgs } from "./Operatore20FindManyArgs";
import { Operatore20FindUniqueArgs } from "./Operatore20FindUniqueArgs";
import { CreateOperatore20Args } from "./CreateOperatore20Args";
import { UpdateOperatore20Args } from "./UpdateOperatore20Args";
import { DeleteOperatore20Args } from "./DeleteOperatore20Args";
import { Operatore20Service } from "../operatore20.service";
@graphql.Resolver(() => Operatore20)
export class Operatore20ResolverBase {
  constructor(protected readonly service: Operatore20Service) {}

  async _operatore20sMeta(
    @graphql.Args() args: Operatore20CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore20])
  async operatore20s(
    @graphql.Args() args: Operatore20FindManyArgs
  ): Promise<Operatore20[]> {
    return this.service.operatore20s(args);
  }

  @graphql.Query(() => Operatore20, { nullable: true })
  async operatore20(
    @graphql.Args() args: Operatore20FindUniqueArgs
  ): Promise<Operatore20 | null> {
    const result = await this.service.operatore20(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore20)
  async createOperatore20(
    @graphql.Args() args: CreateOperatore20Args
  ): Promise<Operatore20> {
    return await this.service.createOperatore20({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore20)
  async updateOperatore20(
    @graphql.Args() args: UpdateOperatore20Args
  ): Promise<Operatore20 | null> {
    try {
      return await this.service.updateOperatore20({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore20)
  async deleteOperatore20(
    @graphql.Args() args: DeleteOperatore20Args
  ): Promise<Operatore20 | null> {
    try {
      return await this.service.deleteOperatore20(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
