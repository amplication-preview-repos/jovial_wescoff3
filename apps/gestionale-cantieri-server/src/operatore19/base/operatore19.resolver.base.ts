/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore19 } from "./Operatore19";
import { Operatore19CountArgs } from "./Operatore19CountArgs";
import { Operatore19FindManyArgs } from "./Operatore19FindManyArgs";
import { Operatore19FindUniqueArgs } from "./Operatore19FindUniqueArgs";
import { CreateOperatore19Args } from "./CreateOperatore19Args";
import { UpdateOperatore19Args } from "./UpdateOperatore19Args";
import { DeleteOperatore19Args } from "./DeleteOperatore19Args";
import { Operatore19Service } from "../operatore19.service";
@graphql.Resolver(() => Operatore19)
export class Operatore19ResolverBase {
  constructor(protected readonly service: Operatore19Service) {}

  async _operatore19sMeta(
    @graphql.Args() args: Operatore19CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore19])
  async operatore19s(
    @graphql.Args() args: Operatore19FindManyArgs
  ): Promise<Operatore19[]> {
    return this.service.operatore19s(args);
  }

  @graphql.Query(() => Operatore19, { nullable: true })
  async operatore19(
    @graphql.Args() args: Operatore19FindUniqueArgs
  ): Promise<Operatore19 | null> {
    const result = await this.service.operatore19(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore19)
  async createOperatore19(
    @graphql.Args() args: CreateOperatore19Args
  ): Promise<Operatore19> {
    return await this.service.createOperatore19({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore19)
  async updateOperatore19(
    @graphql.Args() args: UpdateOperatore19Args
  ): Promise<Operatore19 | null> {
    try {
      return await this.service.updateOperatore19({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore19)
  async deleteOperatore19(
    @graphql.Args() args: DeleteOperatore19Args
  ): Promise<Operatore19 | null> {
    try {
      return await this.service.deleteOperatore19(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
