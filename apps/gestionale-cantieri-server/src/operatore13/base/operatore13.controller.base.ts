/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { Operatore13Service } from "../operatore13.service";
import { Operatore13CreateInput } from "./Operatore13CreateInput";
import { Operatore13 } from "./Operatore13";
import { Operatore13FindManyArgs } from "./Operatore13FindManyArgs";
import { Operatore13WhereUniqueInput } from "./Operatore13WhereUniqueInput";
import { Operatore13UpdateInput } from "./Operatore13UpdateInput";

export class Operatore13ControllerBase {
  constructor(protected readonly service: Operatore13Service) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operatore13 })
  async createOperatore13(
    @common.Body() data: Operatore13CreateInput
  ): Promise<Operatore13> {
    return await this.service.createOperatore13({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Operatore13] })
  @ApiNestedQuery(Operatore13FindManyArgs)
  async operatore13s(@common.Req() request: Request): Promise<Operatore13[]> {
    const args = plainToClass(Operatore13FindManyArgs, request.query);
    return this.service.operatore13s({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operatore13 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async operatore13(
    @common.Param() params: Operatore13WhereUniqueInput
  ): Promise<Operatore13 | null> {
    const result = await this.service.operatore13({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operatore13 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOperatore13(
    @common.Param() params: Operatore13WhereUniqueInput,
    @common.Body() data: Operatore13UpdateInput
  ): Promise<Operatore13 | null> {
    try {
      return await this.service.updateOperatore13({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operatore13 })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOperatore13(
    @common.Param() params: Operatore13WhereUniqueInput
  ): Promise<Operatore13 | null> {
    try {
      return await this.service.deleteOperatore13({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
