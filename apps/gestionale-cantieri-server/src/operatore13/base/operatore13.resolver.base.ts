/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore13 } from "./Operatore13";
import { Operatore13CountArgs } from "./Operatore13CountArgs";
import { Operatore13FindManyArgs } from "./Operatore13FindManyArgs";
import { Operatore13FindUniqueArgs } from "./Operatore13FindUniqueArgs";
import { CreateOperatore13Args } from "./CreateOperatore13Args";
import { UpdateOperatore13Args } from "./UpdateOperatore13Args";
import { DeleteOperatore13Args } from "./DeleteOperatore13Args";
import { Operatore13Service } from "../operatore13.service";
@graphql.Resolver(() => Operatore13)
export class Operatore13ResolverBase {
  constructor(protected readonly service: Operatore13Service) {}

  async _operatore13sMeta(
    @graphql.Args() args: Operatore13CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore13])
  async operatore13s(
    @graphql.Args() args: Operatore13FindManyArgs
  ): Promise<Operatore13[]> {
    return this.service.operatore13s(args);
  }

  @graphql.Query(() => Operatore13, { nullable: true })
  async operatore13(
    @graphql.Args() args: Operatore13FindUniqueArgs
  ): Promise<Operatore13 | null> {
    const result = await this.service.operatore13(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore13)
  async createOperatore13(
    @graphql.Args() args: CreateOperatore13Args
  ): Promise<Operatore13> {
    return await this.service.createOperatore13({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore13)
  async updateOperatore13(
    @graphql.Args() args: UpdateOperatore13Args
  ): Promise<Operatore13 | null> {
    try {
      return await this.service.updateOperatore13({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore13)
  async deleteOperatore13(
    @graphql.Args() args: DeleteOperatore13Args
  ): Promise<Operatore13 | null> {
    try {
      return await this.service.deleteOperatore13(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
