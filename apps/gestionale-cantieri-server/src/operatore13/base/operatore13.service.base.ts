/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore13 as PrismaOperatore13 } from "@prisma/client";

export class Operatore13ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore13CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore13.count(args);
  }

  async operatore13s(
    args: Prisma.Operatore13FindManyArgs
  ): Promise<PrismaOperatore13[]> {
    return this.prisma.operatore13.findMany(args);
  }
  async operatore13(
    args: Prisma.Operatore13FindUniqueArgs
  ): Promise<PrismaOperatore13 | null> {
    return this.prisma.operatore13.findUnique(args);
  }
  async createOperatore13(
    args: Prisma.Operatore13CreateArgs
  ): Promise<PrismaOperatore13> {
    return this.prisma.operatore13.create(args);
  }
  async updateOperatore13(
    args: Prisma.Operatore13UpdateArgs
  ): Promise<PrismaOperatore13> {
    return this.prisma.operatore13.update(args);
  }
  async deleteOperatore13(
    args: Prisma.Operatore13DeleteArgs
  ): Promise<PrismaOperatore13> {
    return this.prisma.operatore13.delete(args);
  }
}
