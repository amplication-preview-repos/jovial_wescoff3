/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore4 } from "./Operatore4";
import { Operatore4CountArgs } from "./Operatore4CountArgs";
import { Operatore4FindManyArgs } from "./Operatore4FindManyArgs";
import { Operatore4FindUniqueArgs } from "./Operatore4FindUniqueArgs";
import { CreateOperatore4Args } from "./CreateOperatore4Args";
import { UpdateOperatore4Args } from "./UpdateOperatore4Args";
import { DeleteOperatore4Args } from "./DeleteOperatore4Args";
import { Operatore4Service } from "../operatore4.service";
@graphql.Resolver(() => Operatore4)
export class Operatore4ResolverBase {
  constructor(protected readonly service: Operatore4Service) {}

  async _operatore4sMeta(
    @graphql.Args() args: Operatore4CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore4])
  async operatore4s(
    @graphql.Args() args: Operatore4FindManyArgs
  ): Promise<Operatore4[]> {
    return this.service.operatore4s(args);
  }

  @graphql.Query(() => Operatore4, { nullable: true })
  async operatore4(
    @graphql.Args() args: Operatore4FindUniqueArgs
  ): Promise<Operatore4 | null> {
    const result = await this.service.operatore4(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore4)
  async createOperatore4(
    @graphql.Args() args: CreateOperatore4Args
  ): Promise<Operatore4> {
    return await this.service.createOperatore4({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore4)
  async updateOperatore4(
    @graphql.Args() args: UpdateOperatore4Args
  ): Promise<Operatore4 | null> {
    try {
      return await this.service.updateOperatore4({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore4)
  async deleteOperatore4(
    @graphql.Args() args: DeleteOperatore4Args
  ): Promise<Operatore4 | null> {
    try {
      return await this.service.deleteOperatore4(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
