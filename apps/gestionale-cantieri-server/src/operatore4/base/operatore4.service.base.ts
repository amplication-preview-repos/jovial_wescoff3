/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Operatore4 as PrismaOperatore4 } from "@prisma/client";

export class Operatore4ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Operatore4CountArgs, "select">
  ): Promise<number> {
    return this.prisma.operatore4.count(args);
  }

  async operatore4s(
    args: Prisma.Operatore4FindManyArgs
  ): Promise<PrismaOperatore4[]> {
    return this.prisma.operatore4.findMany(args);
  }
  async operatore4(
    args: Prisma.Operatore4FindUniqueArgs
  ): Promise<PrismaOperatore4 | null> {
    return this.prisma.operatore4.findUnique(args);
  }
  async createOperatore4(
    args: Prisma.Operatore4CreateArgs
  ): Promise<PrismaOperatore4> {
    return this.prisma.operatore4.create(args);
  }
  async updateOperatore4(
    args: Prisma.Operatore4UpdateArgs
  ): Promise<PrismaOperatore4> {
    return this.prisma.operatore4.update(args);
  }
  async deleteOperatore4(
    args: Prisma.Operatore4DeleteArgs
  ): Promise<PrismaOperatore4> {
    return this.prisma.operatore4.delete(args);
  }
}
