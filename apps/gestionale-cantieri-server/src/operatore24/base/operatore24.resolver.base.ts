/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Operatore24 } from "./Operatore24";
import { Operatore24CountArgs } from "./Operatore24CountArgs";
import { Operatore24FindManyArgs } from "./Operatore24FindManyArgs";
import { Operatore24FindUniqueArgs } from "./Operatore24FindUniqueArgs";
import { CreateOperatore24Args } from "./CreateOperatore24Args";
import { UpdateOperatore24Args } from "./UpdateOperatore24Args";
import { DeleteOperatore24Args } from "./DeleteOperatore24Args";
import { Operatore24Service } from "../operatore24.service";
@graphql.Resolver(() => Operatore24)
export class Operatore24ResolverBase {
  constructor(protected readonly service: Operatore24Service) {}

  async _operatore24sMeta(
    @graphql.Args() args: Operatore24CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Operatore24])
  async operatore24s(
    @graphql.Args() args: Operatore24FindManyArgs
  ): Promise<Operatore24[]> {
    return this.service.operatore24s(args);
  }

  @graphql.Query(() => Operatore24, { nullable: true })
  async operatore24(
    @graphql.Args() args: Operatore24FindUniqueArgs
  ): Promise<Operatore24 | null> {
    const result = await this.service.operatore24(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Operatore24)
  async createOperatore24(
    @graphql.Args() args: CreateOperatore24Args
  ): Promise<Operatore24> {
    return await this.service.createOperatore24({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Operatore24)
  async updateOperatore24(
    @graphql.Args() args: UpdateOperatore24Args
  ): Promise<Operatore24 | null> {
    try {
      return await this.service.updateOperatore24({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Operatore24)
  async deleteOperatore24(
    @graphql.Args() args: DeleteOperatore24Args
  ): Promise<Operatore24 | null> {
    try {
      return await this.service.deleteOperatore24(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
