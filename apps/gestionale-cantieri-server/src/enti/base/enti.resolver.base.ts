/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Enti } from "./Enti";
import { EntiCountArgs } from "./EntiCountArgs";
import { EntiFindManyArgs } from "./EntiFindManyArgs";
import { EntiFindUniqueArgs } from "./EntiFindUniqueArgs";
import { CreateEntiArgs } from "./CreateEntiArgs";
import { UpdateEntiArgs } from "./UpdateEntiArgs";
import { DeleteEntiArgs } from "./DeleteEntiArgs";
import { EntiService } from "../enti.service";
@graphql.Resolver(() => Enti)
export class EntiResolverBase {
  constructor(protected readonly service: EntiService) {}

  async _entisMeta(
    @graphql.Args() args: EntiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Enti])
  async entis(@graphql.Args() args: EntiFindManyArgs): Promise<Enti[]> {
    return this.service.entis(args);
  }

  @graphql.Query(() => Enti, { nullable: true })
  async enti(@graphql.Args() args: EntiFindUniqueArgs): Promise<Enti | null> {
    const result = await this.service.enti(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Enti)
  async createEnti(@graphql.Args() args: CreateEntiArgs): Promise<Enti> {
    return await this.service.createEnti({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Enti)
  async updateEnti(@graphql.Args() args: UpdateEntiArgs): Promise<Enti | null> {
    try {
      return await this.service.updateEnti({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Enti)
  async deleteEnti(@graphql.Args() args: DeleteEntiArgs): Promise<Enti | null> {
    try {
      return await this.service.deleteEnti(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
