/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EntiService } from "../enti.service";
import { EntiCreateInput } from "./EntiCreateInput";
import { Enti } from "./Enti";
import { EntiFindManyArgs } from "./EntiFindManyArgs";
import { EntiWhereUniqueInput } from "./EntiWhereUniqueInput";
import { EntiUpdateInput } from "./EntiUpdateInput";

export class EntiControllerBase {
  constructor(protected readonly service: EntiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Enti })
  async createEnti(@common.Body() data: EntiCreateInput): Promise<Enti> {
    return await this.service.createEnti({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tipo: true,
        nome: true,
        descrizione: true,
        cantiere: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Enti] })
  @ApiNestedQuery(EntiFindManyArgs)
  async entis(@common.Req() request: Request): Promise<Enti[]> {
    const args = plainToClass(EntiFindManyArgs, request.query);
    return this.service.entis({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tipo: true,
        nome: true,
        descrizione: true,
        cantiere: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Enti })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async enti(
    @common.Param() params: EntiWhereUniqueInput
  ): Promise<Enti | null> {
    const result = await this.service.enti({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tipo: true,
        nome: true,
        descrizione: true,
        cantiere: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Enti })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnti(
    @common.Param() params: EntiWhereUniqueInput,
    @common.Body() data: EntiUpdateInput
  ): Promise<Enti | null> {
    try {
      return await this.service.updateEnti({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tipo: true,
          nome: true,
          descrizione: true,
          cantiere: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Enti })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnti(
    @common.Param() params: EntiWhereUniqueInput
  ): Promise<Enti | null> {
    try {
      return await this.service.deleteEnti({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tipo: true,
          nome: true,
          descrizione: true,
          cantiere: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
