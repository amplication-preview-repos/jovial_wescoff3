/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CantieriService } from "../cantieri.service";
import { CantieriCreateInput } from "./CantieriCreateInput";
import { Cantieri } from "./Cantieri";
import { CantieriFindManyArgs } from "./CantieriFindManyArgs";
import { CantieriWhereUniqueInput } from "./CantieriWhereUniqueInput";
import { CantieriUpdateInput } from "./CantieriUpdateInput";

export class CantieriControllerBase {
  constructor(protected readonly service: CantieriService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cantieri })
  async createCantieri(
    @common.Body() data: CantieriCreateInput
  ): Promise<Cantieri> {
    return await this.service.createCantieri({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        descrizione: true,
        immagine: true,
        documenti: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cantieri] })
  @ApiNestedQuery(CantieriFindManyArgs)
  async cantieris(@common.Req() request: Request): Promise<Cantieri[]> {
    const args = plainToClass(CantieriFindManyArgs, request.query);
    return this.service.cantieris({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        descrizione: true,
        immagine: true,
        documenti: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cantieri })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cantieri(
    @common.Param() params: CantieriWhereUniqueInput
  ): Promise<Cantieri | null> {
    const result = await this.service.cantieri({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        descrizione: true,
        immagine: true,
        documenti: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cantieri })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCantieri(
    @common.Param() params: CantieriWhereUniqueInput,
    @common.Body() data: CantieriUpdateInput
  ): Promise<Cantieri | null> {
    try {
      return await this.service.updateCantieri({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          descrizione: true,
          immagine: true,
          documenti: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cantieri })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCantieri(
    @common.Param() params: CantieriWhereUniqueInput
  ): Promise<Cantieri | null> {
    try {
      return await this.service.deleteCantieri({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          descrizione: true,
          immagine: true,
          documenti: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
