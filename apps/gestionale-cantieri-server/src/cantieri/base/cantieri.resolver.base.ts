/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cantieri } from "./Cantieri";
import { CantieriCountArgs } from "./CantieriCountArgs";
import { CantieriFindManyArgs } from "./CantieriFindManyArgs";
import { CantieriFindUniqueArgs } from "./CantieriFindUniqueArgs";
import { CreateCantieriArgs } from "./CreateCantieriArgs";
import { UpdateCantieriArgs } from "./UpdateCantieriArgs";
import { DeleteCantieriArgs } from "./DeleteCantieriArgs";
import { CantieriService } from "../cantieri.service";
@graphql.Resolver(() => Cantieri)
export class CantieriResolverBase {
  constructor(protected readonly service: CantieriService) {}

  async _cantierisMeta(
    @graphql.Args() args: CantieriCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cantieri])
  async cantieris(
    @graphql.Args() args: CantieriFindManyArgs
  ): Promise<Cantieri[]> {
    return this.service.cantieris(args);
  }

  @graphql.Query(() => Cantieri, { nullable: true })
  async cantieri(
    @graphql.Args() args: CantieriFindUniqueArgs
  ): Promise<Cantieri | null> {
    const result = await this.service.cantieri(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cantieri)
  async createCantieri(
    @graphql.Args() args: CreateCantieriArgs
  ): Promise<Cantieri> {
    return await this.service.createCantieri({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cantieri)
  async updateCantieri(
    @graphql.Args() args: UpdateCantieriArgs
  ): Promise<Cantieri | null> {
    try {
      return await this.service.updateCantieri({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cantieri)
  async deleteCantieri(
    @graphql.Args() args: DeleteCantieriArgs
  ): Promise<Cantieri | null> {
    try {
      return await this.service.deleteCantieri(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
