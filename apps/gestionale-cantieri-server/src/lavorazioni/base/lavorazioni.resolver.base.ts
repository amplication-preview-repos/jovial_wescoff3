/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lavorazioni } from "./Lavorazioni";
import { LavorazioniCountArgs } from "./LavorazioniCountArgs";
import { LavorazioniFindManyArgs } from "./LavorazioniFindManyArgs";
import { LavorazioniFindUniqueArgs } from "./LavorazioniFindUniqueArgs";
import { CreateLavorazioniArgs } from "./CreateLavorazioniArgs";
import { UpdateLavorazioniArgs } from "./UpdateLavorazioniArgs";
import { DeleteLavorazioniArgs } from "./DeleteLavorazioniArgs";
import { Operatore } from "../../operatore/base/Operatore";
import { LavorazioniService } from "../lavorazioni.service";
@graphql.Resolver(() => Lavorazioni)
export class LavorazioniResolverBase {
  constructor(protected readonly service: LavorazioniService) {}

  async _lavorazionisMeta(
    @graphql.Args() args: LavorazioniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lavorazioni])
  async lavorazionis(
    @graphql.Args() args: LavorazioniFindManyArgs
  ): Promise<Lavorazioni[]> {
    return this.service.lavorazionis(args);
  }

  @graphql.Query(() => Lavorazioni, { nullable: true })
  async lavorazioni(
    @graphql.Args() args: LavorazioniFindUniqueArgs
  ): Promise<Lavorazioni | null> {
    const result = await this.service.lavorazioni(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lavorazioni)
  async createLavorazioni(
    @graphql.Args() args: CreateLavorazioniArgs
  ): Promise<Lavorazioni> {
    return await this.service.createLavorazioni({
      ...args,
      data: {
        ...args.data,

        operatore: args.data.operatore
          ? {
              connect: args.data.operatore,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lavorazioni)
  async updateLavorazioni(
    @graphql.Args() args: UpdateLavorazioniArgs
  ): Promise<Lavorazioni | null> {
    try {
      return await this.service.updateLavorazioni({
        ...args,
        data: {
          ...args.data,

          operatore: args.data.operatore
            ? {
                connect: args.data.operatore,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lavorazioni)
  async deleteLavorazioni(
    @graphql.Args() args: DeleteLavorazioniArgs
  ): Promise<Lavorazioni | null> {
    try {
      return await this.service.deleteLavorazioni(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Operatore, {
    nullable: true,
    name: "operatore",
  })
  async getOperatore(
    @graphql.Parent() parent: Lavorazioni
  ): Promise<Operatore | null> {
    const result = await this.service.getOperatore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
