/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lavorazioni as PrismaLavorazioni,
  Operatore as PrismaOperatore,
} from "@prisma/client";

export class LavorazioniServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LavorazioniCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lavorazioni.count(args);
  }

  async lavorazionis(
    args: Prisma.LavorazioniFindManyArgs
  ): Promise<PrismaLavorazioni[]> {
    return this.prisma.lavorazioni.findMany(args);
  }
  async lavorazioni(
    args: Prisma.LavorazioniFindUniqueArgs
  ): Promise<PrismaLavorazioni | null> {
    return this.prisma.lavorazioni.findUnique(args);
  }
  async createLavorazioni(
    args: Prisma.LavorazioniCreateArgs
  ): Promise<PrismaLavorazioni> {
    return this.prisma.lavorazioni.create(args);
  }
  async updateLavorazioni(
    args: Prisma.LavorazioniUpdateArgs
  ): Promise<PrismaLavorazioni> {
    return this.prisma.lavorazioni.update(args);
  }
  async deleteLavorazioni(
    args: Prisma.LavorazioniDeleteArgs
  ): Promise<PrismaLavorazioni> {
    return this.prisma.lavorazioni.delete(args);
  }

  async getOperatore(parentId: string): Promise<PrismaOperatore | null> {
    return this.prisma.lavorazioni
      .findUnique({
        where: { id: parentId },
      })
      .operatore();
  }
}
