/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lavoro } from "./Lavoro";
import { LavoroCountArgs } from "./LavoroCountArgs";
import { LavoroFindManyArgs } from "./LavoroFindManyArgs";
import { LavoroFindUniqueArgs } from "./LavoroFindUniqueArgs";
import { CreateLavoroArgs } from "./CreateLavoroArgs";
import { UpdateLavoroArgs } from "./UpdateLavoroArgs";
import { DeleteLavoroArgs } from "./DeleteLavoroArgs";
import { Cliente } from "../../cliente/base/Cliente";
import { LavoroService } from "../lavoro.service";
@graphql.Resolver(() => Lavoro)
export class LavoroResolverBase {
  constructor(protected readonly service: LavoroService) {}

  async _lavorosMeta(
    @graphql.Args() args: LavoroCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lavoro])
  async lavoros(@graphql.Args() args: LavoroFindManyArgs): Promise<Lavoro[]> {
    return this.service.lavoros(args);
  }

  @graphql.Query(() => Lavoro, { nullable: true })
  async lavoro(
    @graphql.Args() args: LavoroFindUniqueArgs
  ): Promise<Lavoro | null> {
    const result = await this.service.lavoro(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lavoro)
  async createLavoro(@graphql.Args() args: CreateLavoroArgs): Promise<Lavoro> {
    return await this.service.createLavoro({
      ...args,
      data: {
        ...args.data,

        cliente: args.data.cliente
          ? {
              connect: args.data.cliente,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lavoro)
  async updateLavoro(
    @graphql.Args() args: UpdateLavoroArgs
  ): Promise<Lavoro | null> {
    try {
      return await this.service.updateLavoro({
        ...args,
        data: {
          ...args.data,

          cliente: args.data.cliente
            ? {
                connect: args.data.cliente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lavoro)
  async deleteLavoro(
    @graphql.Args() args: DeleteLavoroArgs
  ): Promise<Lavoro | null> {
    try {
      return await this.service.deleteLavoro(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Cliente, {
    nullable: true,
    name: "cliente",
  })
  async getCliente(@graphql.Parent() parent: Lavoro): Promise<Cliente | null> {
    const result = await this.service.getCliente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
