/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lavoro as PrismaLavoro,
  Cliente as PrismaCliente,
} from "@prisma/client";

export class LavoroServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LavoroCountArgs, "select">): Promise<number> {
    return this.prisma.lavoro.count(args);
  }

  async lavoros(args: Prisma.LavoroFindManyArgs): Promise<PrismaLavoro[]> {
    return this.prisma.lavoro.findMany(args);
  }
  async lavoro(
    args: Prisma.LavoroFindUniqueArgs
  ): Promise<PrismaLavoro | null> {
    return this.prisma.lavoro.findUnique(args);
  }
  async createLavoro(args: Prisma.LavoroCreateArgs): Promise<PrismaLavoro> {
    return this.prisma.lavoro.create(args);
  }
  async updateLavoro(args: Prisma.LavoroUpdateArgs): Promise<PrismaLavoro> {
    return this.prisma.lavoro.update(args);
  }
  async deleteLavoro(args: Prisma.LavoroDeleteArgs): Promise<PrismaLavoro> {
    return this.prisma.lavoro.delete(args);
  }

  async getCliente(parentId: string): Promise<PrismaCliente | null> {
    return this.prisma.lavoro
      .findUnique({
        where: { id: parentId },
      })
      .cliente();
  }
}
